#!/bin/bash
# Git pre-commit hook for Dental Clinic AI
# Validates code changes before commit

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print error and exit
error_exit() {
    echo -e "${RED}❌ Commit rejected:${NC} $1"
    exit 1
}

# Function to print warning
warning() {
    echo -e "${YELLOW}⚠️  Warning:${NC} $1"
}

# Function to print info
info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

# Function to print success
success() {
    echo -e "${GREEN}✅${NC} $1"
}

echo "🔍 Running pre-commit checks..."

# Check 1: Python syntax errors
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$')

if [ -n "$PYTHON_FILES" ]; then
    info "Checking Python syntax..."
    
    for file in $PYTHON_FILES; do
        python3 -m py_compile "$file" 2>/dev/null
        if [ $? -ne 0 ]; then
            error_exit "Python syntax error in $file
            
            Fix the syntax error and try again."
        fi
    done
    
    success "Python syntax is valid"
fi

# Check 2: Work Plan Sync Check
# Check if agent files are being modified/deleted
AGENT_FILES=$(git diff --cached --name-only --diff-filter=AMD | grep 'backend/app/agents/.*\.py$')

if [ -n "$AGENT_FILES" ]; then
    info "Checking work plan sync..."
    
    # Get list of agents mentioned in work plan
    WORK_PLAN="WORK_PLAN_V19.0_UNIFIED.md"
    
    if [ -f "$WORK_PLAN" ]; then
        for file in $AGENT_FILES; do
            # Extract agent name from file path
            AGENT_NAME=$(basename "$file" .py)
            
            # Check if agent is mentioned in work plan
            if ! grep -qi "$AGENT_NAME" "$WORK_PLAN"; then
                warning "Agent '$AGENT_NAME' is being modified but not found in $WORK_PLAN
                
                Consider updating the work plan to reflect this change."
            fi
        done
    else
        warning "Work plan not found: $WORK_PLAN"
    fi
fi

# Check 3: Frontend-Backend Sync Check
# Check if backend agents are being modified
if [ -n "$AGENT_FILES" ]; then
    info "Checking frontend-backend sync..."
    
    # Check if frontend references need updating
    FRONTEND_AGENT_REFS=$(find frontend/src -name '*.jsx' -o -name '*.tsx' 2>/dev/null | xargs grep -l "agent" 2>/dev/null)
    
    if [ -n "$FRONTEND_AGENT_REFS" ]; then
        warning "Backend agents are being modified. Check if frontend needs updating:
        
        Files that reference agents:
        $FRONTEND_AGENT_REFS
        
        Ensure frontend is in sync with backend agent changes."
    fi
fi

# Check 4: Test coverage for new agents
NEW_AGENT_FILES=$(git diff --cached --name-only --diff-filter=A | grep 'backend/app/agents/.*\.py$' | grep -v '__init__\.py$')

if [ -n "$NEW_AGENT_FILES" ]; then
    info "Checking test coverage for new agents..."
    
    for file in $NEW_AGENT_FILES; do
        AGENT_NAME=$(basename "$file" .py)
        TEST_FILE="backend/tests/test_${AGENT_NAME}.py"
        
        if [ ! -f "$TEST_FILE" ]; then
            warning "New agent '$AGENT_NAME' has no test file
            
            Consider creating: $TEST_FILE"
        fi
    done
fi

# Check 5: Large file check (>1MB)
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | while read file; do
    if [ -f "$file" ]; then
        SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$SIZE" -gt 1048576 ]; then
            echo "$file ($((SIZE / 1024))KB)"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    warning "Large files being committed:
    
    $LARGE_FILES
    
    Consider:
    - Using Git LFS for large files
    - Compressing the files
    - Storing externally (S3, etc.)"
fi

# Check 6: Secrets check (basic)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -n "$STAGED_FILES" ]; then
    info "Checking for potential secrets..."
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Check for common secret patterns
            SECRETS=$(grep -nE "(password|secret|api_key|token|private_key)\s*=\s*['\"][^'\"]+['\"]" "$file" 2>/dev/null)
            
            if [ -n "$SECRETS" ]; then
                warning "Potential secrets found in $file:
                
                $SECRETS
                
                Ensure these are not real secrets. Use environment variables instead."
            fi
        fi
    done
fi

# Check 7: .env file check
if git diff --cached --name-only | grep -q "^\.env$"; then
    error_exit ".env file should not be committed
    
    .env contains secrets and should be in .gitignore
    
    To unstage:
    git reset HEAD .env
    
    To remove from history (if already committed):
    git rm --cached .env
    git commit --amend"
fi

# All checks passed
echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
echo ""
echo "💡 Tip: To bypass these checks, use: git commit --no-verify"
echo ""
exit 0
